-- MySQL Script generated by MySQL Workbench
-- Sun Oct 30 17:04:29 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema SmartBuildingDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema SmartBuildingDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SmartBuildingDB` DEFAULT CHARACTER SET utf8 ;
USE `SmartBuildingDB` ;

-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`AreaGeografica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`AreaGeografica` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`AreaGeografica` (
  `idArea` INT NOT NULL,
  `Ubicazione` VARCHAR(45) NOT NULL,
  `RischioTot` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idArea`),
  UNIQUE INDEX `idArea_UNIQUE` (`idArea` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`SmartBuilding`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`SmartBuilding` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`SmartBuilding` (
  `idEdificio` INT NOT NULL,
  `Tipologia` VARCHAR(45) NOT NULL,
  `idArea` INT NOT NULL,
  `LivelloSicurezza` INT UNSIGNED NOT NULL,
  `Completato` TINYINT NOT NULL,
  PRIMARY KEY (`idEdificio`),
  UNIQUE INDEX `idEdificio_UNIQUE` (`idEdificio` ASC) VISIBLE,
  INDEX `fk_SmartBuilding_AreaGeografica_idx` (`idArea` ASC) VISIBLE,
  CONSTRAINT `fk_SmartBuilding_AreaGeografica`
    FOREIGN KEY (`idArea`)
    REFERENCES `SmartBuildingDB`.`AreaGeografica` (`idArea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Calamita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Calamita` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Calamita` (
  `idCalamita` INT NOT NULL,
  `Tipologia` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCalamita`),
  UNIQUE INDEX `idCalamita_UNIQUE` (`idCalamita` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Colpo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Colpo` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Colpo` (
  `idCalamita` INT NOT NULL,
  `idEdificio` INT NOT NULL,
  `Distanza` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Livello` FLOAT NOT NULL,
  PRIMARY KEY (`idCalamita`, `idEdificio`, `TimeStamp`),
  INDEX `fk_Calamita_has_SmartBuilding_SmartBuilding1_idx` (`idEdificio` ASC) VISIBLE,
  INDEX `fk_Calamita_has_SmartBuilding_Calamita1_idx` (`idCalamita` ASC) VISIBLE,
  CONSTRAINT `fk_Calamita_has_SmartBuilding_Calamita1`
    FOREIGN KEY (`idCalamita`)
    REFERENCES `SmartBuildingDB`.`Calamita` (`idCalamita`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Calamita_has_SmartBuilding_SmartBuilding1`
    FOREIGN KEY (`idEdificio`)
    REFERENCES `SmartBuildingDB`.`SmartBuilding` (`idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RischioAttuale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RischioAttuale` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RischioAttuale` (
  `idCalamita` INT NOT NULL,
  `idArea` INT NOT NULL,
  `dataRilevazione` DATE NOT NULL,
  `CoeffRischio` INT NOT NULL,
  PRIMARY KEY (`idCalamita`, `idArea`),
  INDEX `fk_Calamita_has_AreaGeografica_AreaGeografica1_idx` (`idArea` ASC) VISIBLE,
  INDEX `fk_Calamita_has_AreaGeografica_Calamita1_idx` (`idCalamita` ASC) VISIBLE,
  CONSTRAINT `fk_Calamita_has_AreaGeografica_Calamita1`
    FOREIGN KEY (`idCalamita`)
    REFERENCES `SmartBuildingDB`.`Calamita` (`idCalamita`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Calamita_has_AreaGeografica_AreaGeografica1`
    FOREIGN KEY (`idArea`)
    REFERENCES `SmartBuildingDB`.`AreaGeografica` (`idArea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Rischio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Rischio` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Rischio` (
  `idCalamita` INT NOT NULL,
  `idArea` INT NOT NULL,
  `dataRilevazione` DATE NOT NULL,
  `CoeffRischio` INT NOT NULL,
  PRIMARY KEY (`idCalamita`, `idArea`, `dataRilevazione`),
  INDEX `fk_Calamita_has_AreaGeografica1_AreaGeografica1_idx` (`idArea` ASC) VISIBLE,
  INDEX `fk_Calamita_has_AreaGeografica1_Calamita1_idx` (`idCalamita` ASC) VISIBLE,
  CONSTRAINT `fk_Calamita_has_AreaGeografica1_Calamita1`
    FOREIGN KEY (`idCalamita`)
    REFERENCES `SmartBuildingDB`.`Calamita` (`idCalamita`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Calamita_has_AreaGeografica1_AreaGeografica1`
    FOREIGN KEY (`idArea`)
    REFERENCES `SmartBuildingDB`.`AreaGeografica` (`idArea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`ProgettoEdilizio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`ProgettoEdilizio` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`ProgettoEdilizio` (
  `idEdificio` INT NOT NULL,
  `CodProgetto` VARCHAR(45) NOT NULL,
  `Modifica` TINYINT NOT NULL,
  `PercentLavori` INT NOT NULL,
  `NumStadi` INT NOT NULL,
  `DataPres` DATE NOT NULL,
  `DataApprov` DATE NULL,
  `DataInizio` DATE NULL,
  `StimaDataFine` DATE NULL,
  `DataFine` DATE NULL,
  `CostoTot` INT NOT NULL,
  `Responsabile` VARCHAR(45) NOT NULL, 
  PRIMARY KEY (`CodProgetto`, `idEdificio`),
  INDEX `fk_ProgettoEdilizio_SmartBuilding1_idx` (`idEdificio` ASC) VISIBLE,
  INDEX `fK_ProgettoEdilizio_Responsabile1_idx` (`Responsabile` ASC) VISIBLE,
  CONSTRAINT `fK_ProgettoEdilizio_Responsabile1_idx`
    FOREIGN KEY (`Responsabile`)
    REFERENCES `SmartBuildingDB`.`Responsabile` (`Responsabile`)
     ON DELETE NO ACTION
     ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProgettoEdilizio_SmartBuilding1`
    FOREIGN KEY (`idEdificio`)
    REFERENCES `SmartBuildingDB`.`SmartBuilding` (`idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`StadioAvanzamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`StadioAvanzamento` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`StadioAvanzamento` (
  `idEdificio` INT NOT NULL,
  `CodProgetto` VARCHAR(45) NOT NULL,
  `idStadio` VARCHAR(45) NOT NULL,
  `DataInizio` DATE NOT NULL,
  `StimaDataFine` DATE NOT NULL,
  `DataFine` DATE NOT NULL,
  `Costo` INT NOT NULL,
  PRIMARY KEY (`idStadio`, `CodProgetto`, `idEdificio`),
  INDEX `fk_StadioAvanzamento_ProgettoEdilizio1_idx` (`CodProgetto` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_StadioAvanzamento_ProgettoEdilizio1`
    FOREIGN KEY (`CodProgetto` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`ProgettoEdilizio` (`CodProgetto` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Lavoro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Lavoro` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Lavoro` (
  `idEdificio` INT NOT NULL,
  `CodProgetto` VARCHAR(45) NOT NULL,
  `idStadio` VARCHAR(45) NOT NULL,
  `idLavoro` VARCHAR(45) NOT NULL,
  `Tipologia` VARCHAR(45) NOT NULL,
  `OreNecessarie` INT NOT NULL,
  PRIMARY KEY (`idLavoro`, `idStadio`, `CodProgetto`, `idEdificio`),
  INDEX `fk_Lavoro_StadioAvanzamento1_idx` (`idStadio` ASC, `CodProgetto` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Lavoro_StadioAvanzamento1`
    FOREIGN KEY (`idStadio` , `CodProgetto` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`StadioAvanzamento` (`idStadio` , `CodProgetto` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Piano`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Piano` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Piano` (
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `Forma` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idPiano`, `idEdificio`),
  INDEX `fk_Piano_SmartBuilding1_idx` (`idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Piano_SmartBuilding1`
    FOREIGN KEY (`idEdificio`)
    REFERENCES `SmartBuildingDB`.`SmartBuilding` (`idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Vano`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Vano` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Vano` (
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `Lunghezza` INT NOT NULL,
  `Larghezza` INT NOT NULL,
  `MinimaAltezza` INT NOT NULL,
  `MassimaAltezza` INT NOT NULL,
  PRIMARY KEY (`idVano`, `idPiano`, `idEdificio`),
  INDEX `fk_Vano_Piano1_idx` (`idPiano` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Vano_Piano1`
    FOREIGN KEY (`idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Piano` (`idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Accesso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Accesso` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Accesso` (
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `idVano1` INT NOT NULL,
  `idPiano1` INT NOT NULL,
  `idEdificio1` INT NOT NULL,
  `Lunghezza` INT NOT NULL,
  `Larghezza` INT NOT NULL,
  `Distanza` INT NOT NULL,
  `Tipo` VARCHAR(45) NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idVano`, `idPiano`, `idEdificio`, `idVano1`, `idPiano1`, `idEdificio1`),
  INDEX `fk_Vano_has_Vano_Vano2_idx` (`idVano1` ASC, `idPiano1` ASC, `idEdificio1` ASC) VISIBLE,
  INDEX `fk_Vano_has_Vano_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Vano_has_Vano_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Vano_has_Vano_Vano2`
    FOREIGN KEY (`idVano1` , `idPiano1` , `idEdificio1`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Funzione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Funzione` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Funzione` (
  `Nome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Nome`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Utilizzo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Utilizzo` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Utilizzo` (
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `Funzione` VARCHAR(45) NOT NULL,
  `Esterno` TINYINT NOT NULL,
  PRIMARY KEY (`idVano`, `idPiano`, `idEdificio`, `Funzione`),
  INDEX `fk_Vano_has_Funzione_Funzione1_idx` (`Funzione` ASC) VISIBLE,
  INDEX `fk_Vano_has_Funzione_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Vano_has_Funzione_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Vano_has_Funzione_Funzione1`
    FOREIGN KEY (`Funzione`)
    REFERENCES `SmartBuildingDB`.`Funzione` (`Nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Finestra`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Finestra` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Finestra` (
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `idFinestra` INT NOT NULL,
  `Distanza` FLOAT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL,
  `Lunghezza` FLOAT NOT NULL,
  `Larghezza` FLOAT NOT NULL,
  PRIMARY KEY (`idFinestra`, `idVano`, `idPiano`, `idEdificio`),
  INDEX `fk_Finestra_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Finestra_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`TipoContratto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`TipoContratto` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`TipoContratto` (
  `MaxOreAnnuali` INT NOT NULL,
  `GiornoLibero` VARCHAR(45) NOT NULL,
  `StipendioAdOra` INT NOT NULL,
  PRIMARY KEY (`MaxOreAnnuali`, `GiornoLibero`, `StipendioAdOra`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Lavoratore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Lavoratore` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Lavoratore` (
  `CodFiscale` VARCHAR(16) NOT NULL,
  `Nome` VARCHAR(45) NOT NULL,
  `Cognome` VARCHAR(45) NOT NULL,
  `DataNascita` DATE NOT NULL,
  `DataAssunzione` DATE NOT NULL,
  `Sesso` VARCHAR(45) NOT NULL,
  `MaxOreAnnuali` INT NOT NULL,
  `GiornoLibero` VARCHAR(45) NOT NULL,
  `StipendioAdOra` INT NOT NULL,
  PRIMARY KEY (`CodFiscale`, `MaxOreAnnuali`, `GiornoLibero`, `StipendioAdOra`),
  INDEX `fk_Lavoratore_TipoContratto1_idx` (`MaxOreAnnuali` ASC, `GiornoLibero` ASC, `StipendioAdOra` ASC) VISIBLE,
  CONSTRAINT `fk_Lavoratore_TipoContratto1`
    FOREIGN KEY (`MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    REFERENCES `SmartBuildingDB`.`TipoContratto` (`MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Turno`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Turno` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Turno` (
  `idEdificio` INT NOT NULL,
  `CodProgetto` VARCHAR(45) NOT NULL,
  `idStadio` VARCHAR(45)  NOT NULL,
  `idLavoro` VARCHAR(45)  NOT NULL,
  `CodFiscale` VARCHAR(16) NOT NULL,
  `Data` DATE NOT NULL,
  `OraInizio` TIME NOT NULL,
  `OraFine` TIME NOT NULL,
  PRIMARY KEY (`idLavoro`, `idStadio`, `CodProgetto`, `idEdificio`, `CodFiscale`),
  INDEX `fk_Lavoro_has_Operaio_Lavoratore1_idx` (`CodFiscale` ASC) VISIBLE,
  INDEX `fk_Lavoro_has_Operaio_Lavoro1_idx` (`idLavoro` ASC, `idStadio` ASC, `CodProgetto` ASC, `idEdificio` ASC) VISIBLE,
  CONSTRAINT `fk_Lavoro_has_Lavoratore_Lavoro1`
    FOREIGN KEY (`idLavoro` , `idStadio` , `CodProgetto` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Lavoro` (`idLavoro` , `idStadio` , `CodProgetto` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lavoro_has_Operaio_Lavoratore1`
    FOREIGN KEY (`CodFiscale`)
    REFERENCES `SmartBuildingDB`.`Operaio` (`Operaio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Responsabile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Responsabile` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Responsabile` (
  `Responsabile` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali` INT NOT NULL,
  `GiornoLibero` VARCHAR(45) NOT NULL,
  `StipendioAdOra` INT NOT NULL,
  `NumCapocantMax` INT NOT NULL,
  `Esperienza` INT NOT NULL,
  PRIMARY KEY (`Responsabile`, `MaxOreAnnuali`, `GiornoLibero`, `StipendioAdOra`),
  CONSTRAINT `fk_Responsabile_Lavoratore1`
    FOREIGN KEY (`Responsabile` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    REFERENCES `SmartBuildingDB`.`Lavoratore` (`CodFiscale` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Capocantiere`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Capocantiere` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Capocantiere` (
  `Capocantiere` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali` INT NOT NULL,
  `GiornoLibero` VARCHAR(45) NOT NULL,
  `StipendioAdOra` INT NOT NULL,
  `NumDipMax` INT NOT NULL,
  `Esperienza` INT NOT NULL,
  PRIMARY KEY (`Capocantiere`, `MaxOreAnnuali`, `GiornoLibero`, `StipendioAdOra`),
  CONSTRAINT `fk_Capocantiere_Lavoratore1`
    FOREIGN KEY (`Capocantiere` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    REFERENCES `SmartBuildingDB`.`Lavoratore` (`CodFiscale` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Operaio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Operaio` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Operaio` (
  `Operaio` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali` INT NOT NULL,
  `GiornoLibero` VARCHAR(45) NOT NULL,
  `StipendioAdOra` INT NOT NULL,
  `GruppoAppartenenza` INT NOT NULL,
  `Specializzazione` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Operaio`, `MaxOreAnnuali`, `GiornoLibero`, `StipendioAdOra`),
  CONSTRAINT `fk_Operaio_Lavoratore1`
    FOREIGN KEY (`Operaio` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    REFERENCES `SmartBuildingDB`.`Lavoratore` (`CodFiscale` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Materiale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Materiale` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Materiale` (
  `Nome` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `CostoAlDettaglio` INT NOT NULL,
  PRIMARY KEY (`Nome`, `NomeFornitore`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Ordine`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Ordine` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Ordine` (
  `CodLotto` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `CodProgetto` VARCHAR(45) NOT NULL,
  `idStadio` VARCHAR(45)  NOT NULL,
  `idLavoro` VARCHAR(45)  NOT NULL,
  `NomeMateriale` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `Quantita` INT NOT NULL,
  `CostoTot` INT NOT NULL,
  `DataAcquisto` DATE NOT NULL,
  PRIMARY KEY (`CodLotto`, `idLavoro`, `idStadio`, `CodProgetto`, `idEdificio`, `NomeMateriale`, `NomeFornitore`),
  INDEX `fk_Ordine_Lavoro1_idx` (`idLavoro` ASC, `idStadio` ASC, `CodProgetto` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_Ordine_Materiale1_idx` (`NomeMateriale` ASC, `NomeFornitore` ASC) VISIBLE,
  CONSTRAINT `fk_Ordine_Lavoro1`
    FOREIGN KEY (`idLavoro` , `idStadio` , `CodProgetto` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Lavoro` (`idLavoro` , `idStadio` , `CodProgetto` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Ordine_Materiale1`
    FOREIGN KEY (`NomeMateriale` , `NomeFornitore`)
    REFERENCES `SmartBuildingDB`.`Materiale` (`Nome` , `NomeFornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Piastrella`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Piastrella` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Piastrella` (
  `Nome` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `Fuga` FLOAT NOT NULL,
  `Forma` VARCHAR(45) NOT NULL,
  `Materiale` VARCHAR(45) NOT NULL,
  `Disegno` VARCHAR(45),
  `MisuraLato` INT NOT NULL,
  PRIMARY KEY (`Nome`, `NomeFornitore`),
  CONSTRAINT `fk_Piastrella_Materiale1`
    FOREIGN KEY (`Nome` , `NomeFornitore`)
    REFERENCES `SmartBuildingDB`.`Materiale` (`Nome` , `NomeFornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Mattone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Mattone` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Mattone` (
  `Nome` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `Isolante` TINYINT NOT NULL,
  `Alveolatura` TINYINT NOT NULL,
  `Materiale` VARCHAR(45) NOT NULL,
  `Altezza` FLOAT NOT NULL,
  `Lunghezza` FLOAT NOT NULL,
  `Larghezza` FLOAT NOT NULL,
  PRIMARY KEY (`Nome`, `NomeFornitore`),
  CONSTRAINT `fk_Mattone_Materiale1`
    FOREIGN KEY (`Nome` , `NomeFornitore`)
    REFERENCES `SmartBuildingDB`.`Materiale` (`Nome` , `NomeFornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Intonaco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Intonaco` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Intonaco` (
  `Nome` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `Strato1` VARCHAR(45),
  `Strato2` VARCHAR(45),
  `Strato3` VARCHAR(45),
  `Spessore1` INT NOT NULL,
  `Spessore2` INT NOT NULL,
  `Spessore3` INT NOT NULL,
  PRIMARY KEY (`Nome`, `NomeFornitore`),
  CONSTRAINT `fk_Intonaco_Materiale1`
    FOREIGN KEY (`Nome` , `NomeFornitore`)
    REFERENCES `SmartBuildingDB`.`Materiale` (`Nome` , `NomeFornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Pietra`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Pietra` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Pietra` (
  `Nome` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `Tipo` VARCHAR(45) NOT NULL,
  `AvgPeso` FLOAT NOT NULL,
  `SupRicoperta` FLOAT NOT NULL,
  `Disposizione` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Nome`, `NomeFornitore`),
  CONSTRAINT `fk_Pietra_Materiale1`
    FOREIGN KEY (`Nome` , `NomeFornitore`)
    REFERENCES `SmartBuildingDB`.`Materiale` (`Nome` , `NomeFornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`AltroMateriale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`AltroMateriale` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`AltroMateriale` (
  `Nome` VARCHAR(45) NOT NULL,
  `NomeFornitore` VARCHAR(45) NOT NULL,
  `PesoSpecifico` FLOAT NOT NULL,
  `MetriCubi` INT NOT NULL,
  PRIMARY KEY (`Nome`, `NomeFornitore`),
  CONSTRAINT `fk_AltroMateriale_Materiale1`
    FOREIGN KEY (`Nome` , `NomeFornitore`)
    REFERENCES `SmartBuildingDB`.`Materiale` (`Nome` , `NomeFornitore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Giroscopio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Giroscopio` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Giroscopio` (
  `Seriale` VARCHAR(45) NOT NULL,
  `Altezza` INT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL CONSTRAINT `check_cardinali_gir` CHECK (Orientamento IN ('nord', 'sud', 'est', 'ovest')),
  PRIMARY KEY (`Seriale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RilevamentoG`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RilevamentoG` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RilevamentoG` (
  `Seriale` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Stimato` TINYINT NOT NULL,
  `Allarme` TINYINT NOT NULL,
  `RiparazPrev` VARCHAR(45) NOT NULL,
  `Valore` FLOAT NOT NULL,
  `vaX` FLOAT NOT NULL,
  `vaY` FLOAT NOT NULL,
  `vaZ` FLOAT NOT NULL,
  PRIMARY KEY (`TimeStamp`, `idVano`, `idPiano`, `idEdificio`, `Seriale`),
  INDEX `fk_RilevamentoG_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_RilevamentoG_Giroscopio1_idx` (`Seriale` ASC) VISIBLE,
  CONSTRAINT `fk_RilevamentoG_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RilevamentoG_Giroscopio1`
    FOREIGN KEY (`Seriale`)
    REFERENCES `SmartBuildingDB`.`Giroscopio` (`Seriale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Accelerometro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Accelerometro` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Accelerometro` (
  `Seriale` VARCHAR(45) NOT NULL,
  `Altezza` INT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL CONSTRAINT `check_cardinali_acc` CHECK (Orientamento IN ('nord', 'sud', 'est', 'ovest')),
  PRIMARY KEY (`Seriale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RilevamentoA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RilevamentoA` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RilevamentoA` (
  `Seriale` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Stimato` TINYINT NOT NULL,
  `Allarme` TINYINT NOT NULL,
  `RiparazPrev` VARCHAR(45) NOT NULL,
  `Valore` FLOAT NOT NULL,
  `accX` FLOAT NOT NULL,
  `accY` FLOAT NOT NULL,
  `accZ` FLOAT NOT NULL,
  PRIMARY KEY (`TimeStamp`, `idVano`, `idPiano`, `idEdificio`, `Seriale`),
  INDEX `fk_RilevamentoA_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_RilevamentoA_Accelerometro1_idx` (`Seriale` ASC) VISIBLE,
  CONSTRAINT `fk_RilevamentoA_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RilevamentoA_Accelerometro1`
    FOREIGN KEY (`Seriale`)
    REFERENCES `SmartBuildingDB`.`Accelerometro` (`Seriale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`SensoreDiPosizione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`SensoreDiPosizione` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`SensoreDiPosizione` (
  `Seriale` VARCHAR(45) NOT NULL,
  `Altezza` INT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL CONSTRAINT `check_cardinali_pos` CHECK (Orientamento IN ('nord', 'sud', 'est', 'ovest')),
  PRIMARY KEY (`Seriale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RilevamentoPO`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RilevamentoPO` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RilevamentoPO` (
  `Seriale` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Stimato` TINYINT NOT NULL,
  `Allarme` TINYINT NOT NULL,
  `RiparazPrev` VARCHAR(45) NOT NULL,
  `Valore` FLOAT NOT NULL,
  `Distanza` INT NOT NULL,
  PRIMARY KEY (`TimeStamp`, `idVano`, `idPiano`, `idEdificio`, `Seriale`),
  INDEX `fk_RilevamentoPO_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_RilevamentoPO_SensoreDiPosizione1_idx` (`Seriale` ASC) VISIBLE,
  CONSTRAINT `fk_RilevamentoPO_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RilevamentoPO_SensoreDiPosizione1`
    FOREIGN KEY (`Seriale`)
    REFERENCES `SmartBuildingDB`.`SensoreDiPosizione` (`Seriale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Termometro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Termometro` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Termometro` (
  `Seriale` VARCHAR(45) NOT NULL,
  `Altezza` INT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL CONSTRAINT `check_cardinali_ter` CHECK (Orientamento IN ('nord', 'sud', 'est', 'ovest')),
  PRIMARY KEY (`Seriale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RilevamentoT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RilevamentoT` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RilevamentoT` (
  `Seriale` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Stimato` TINYINT NOT NULL,
  `Allarme` TINYINT NOT NULL,
  `RiparazPrev` VARCHAR(45) NOT NULL,
  `Valore` FLOAT NOT NULL,
  `Gradi` FLOAT NOT NULL,
  `Esterno` TINYINT NOT NULL,
  PRIMARY KEY (`TimeStamp`, `idVano`, `idPiano`, `idEdificio`, `Seriale`),
  INDEX `fk_RilevamentoT_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_RilevamentoT_Termometro1_idx` (`Seriale` ASC) VISIBLE,
  CONSTRAINT `fk_RilevamentoT_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RilevamentoT_Termometro1`
    FOREIGN KEY (`Seriale`)
    REFERENCES `SmartBuildingDB`.`Termometro` (`Seriale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Pluviometro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Pluviometro` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Pluviometro` (
  `Seriale` VARCHAR(45) NOT NULL,
  `Altezza` INT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL CONSTRAINT `check_cardinali_prec` CHECK (Orientamento IN ('nord', 'sud', 'est', 'ovest')),
  PRIMARY KEY (`Seriale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RilevamentoP`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RilevamentoP` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RilevamentoP` (
  `Seriale` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Stimato` TINYINT NOT NULL,
  `Allarme` TINYINT NOT NULL,
  `RiparazPrev` VARCHAR(45) NOT NULL,
  `Valore` FLOAT NOT NULL,
  `mL_metroCubo` INT NOT NULL,
  PRIMARY KEY (`TimeStamp`, `idVano`, `idPiano`, `idEdificio`, `Seriale`),
  INDEX `fk_RilevamentoP_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_RilevamentoP_Pluviometro1_idx` (`Seriale` ASC) VISIBLE,
  CONSTRAINT `fk_RilevamentoP_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RilevamentoP_Pluviometro1`
    FOREIGN KEY (`Seriale`)
    REFERENCES `SmartBuildingDB`.`Pluviometro` (`Seriale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Barometro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Barometro` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Barometro` (
  `Seriale` VARCHAR(45) NOT NULL,
  `Altezza` INT NOT NULL,
  `Orientamento` VARCHAR(45) NOT NULL CONSTRAINT `check_cardinali_bar` CHECK (Orientamento IN ('nord', 'sud', 'est', 'ovest')),
  PRIMARY KEY (`Seriale`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`RilevamentoB`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`RilevamentoB` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`RilevamentoB` (
  `Seriale` VARCHAR(45) NOT NULL,
  `idEdificio` INT NOT NULL,
  `idPiano` INT NOT NULL,
  `idVano` INT NOT NULL,
  `TimeStamp` DATE NOT NULL,
  `Stimato` TINYINT NOT NULL,
  `Allarme` TINYINT NOT NULL,
  `RiparazPrev` VARCHAR(45) NOT NULL,
  `Valore` INT NOT NULL,
  `Percentuale` INT NOT NULL,
  `Esterno` TINYINT NOT NULL,
  PRIMARY KEY (`TimeStamp`, `idVano`, `idPiano`, `idEdificio`, `Seriale`),
  INDEX `fk_RilevamentoB_Vano1_idx` (`idVano` ASC, `idPiano` ASC, `idEdificio` ASC) VISIBLE,
  INDEX `fk_RilevamentoB_Barometro1_idx` (`Seriale` ASC) VISIBLE,
  CONSTRAINT `fk_RilevamentoB_Vano1`
    FOREIGN KEY (`idVano` , `idPiano` , `idEdificio`)
    REFERENCES `SmartBuildingDB`.`Vano` (`idVano` , `idPiano` , `idEdificio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RilevamentoB_Barometro1`
    FOREIGN KEY (`Seriale`)
    REFERENCES `SmartBuildingDB`.`Barometro` (`Seriale`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Gestione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Gestione` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Gestione` (
  `Responsabile` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali_R` INT NOT NULL,
  `GiornoLibero_R` VARCHAR(45) NOT NULL,
  `StipendioAdOra_R` INT NOT NULL,
  `Capocantiere` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali_C` INT NOT NULL,
  `GiornoLibero_C` VARCHAR(45) NOT NULL,
  `StipendioAdOra_C` INT NOT NULL,
  PRIMARY KEY (`Responsabile`, `MaxOreAnnuali_R`, `GiornoLibero_R`, `StipendioAdOra_R`, `Capocantiere`, `MaxOreAnnuali_C`, `GiornoLibero_C`, `StipendioAdOra_C`),
  INDEX `fk_Responsabile_has_Capocantiere_Capocantiere1_idx` (`Capocantiere` ASC, `MaxOreAnnuali_C` ASC, `GiornoLibero_C` ASC, `StipendioAdOra_C` ASC) VISIBLE,
  INDEX `fk_Responsabile_has_Capocantiere_Responsabile1_idx` (`Responsabile` ASC, `MaxOreAnnuali_R` ASC, `GiornoLibero_R` ASC, `StipendioAdOra_R` ASC) VISIBLE,
  CONSTRAINT `fk_Responsabile_has_Capocantiere_Responsabile1`
    FOREIGN KEY (`Responsabile` , `MaxOreAnnuali_R` , `GiornoLibero_R` , `StipendioAdOra_R`)
    REFERENCES `SmartBuildingDB`.`Responsabile` (`Responsabile` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Responsabile_has_Capocantiere_Capocantiere1`
    FOREIGN KEY (`Capocantiere` , `MaxOreAnnuali_C` , `GiornoLibero_C` , `StipendioAdOra_C`)
    REFERENCES `SmartBuildingDB`.`Capocantiere` (`Capocantiere` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartBuildingDB`.`Coordinazione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartBuildingDB`.`Coordinazione` ;

CREATE TABLE IF NOT EXISTS `SmartBuildingDB`.`Coordinazione` (
  `Capocantiere` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali_C` INT NOT NULL,
  `GiornoLibero_C` VARCHAR(45) NOT NULL,
  `StipendioAdOra_C` INT NOT NULL,
  `Operaio` VARCHAR(16) NOT NULL,
  `MaxOreAnnuali_O` INT NOT NULL,
  `GiornoLibero_O` VARCHAR(45) NOT NULL,
  `StipendioAdOra_O` INT NOT NULL,
  PRIMARY KEY (`Capocantiere`, `MaxOreAnnuali_C`, `GiornoLibero_C`, `StipendioAdOra_C`, `Operaio`, `MaxOreAnnuali_O`, `GiornoLibero_O`, `StipendioAdOra_O`),
  INDEX `fk_Capocantiere_has_Operaio_Operaio1_idx` (`Operaio` ASC, `MaxOreAnnuali_O` ASC, `GiornoLibero_O` ASC, `StipendioAdOra_O` ASC) VISIBLE,
  INDEX `fk_Capocantiere_has_Operaio_Capocantiere1_idx` (`Capocantiere` ASC, `MaxOreAnnuali_C` ASC, `GiornoLibero_C` ASC, `StipendioAdOra_C` ASC) VISIBLE,
  CONSTRAINT `fk_Capocantiere_has_Operaio_Capocantiere1`
    FOREIGN KEY (`Capocantiere` , `MaxOreAnnuali_C` , `GiornoLibero_C` , `StipendioAdOra_C`)
    REFERENCES `SmartBuildingDB`.`Capocantiere` (`Capocantiere` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Capocantiere_has_Operaio_Operaio1`
    FOREIGN KEY (`Operaio` , `MaxOreAnnuali_O` , `GiornoLibero_O` , `StipendioAdOra_O`)
    REFERENCES `SmartBuildingDB`.`Operaio` (`Operaio` , `MaxOreAnnuali` , `GiornoLibero` , `StipendioAdOra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;




-- ----------------------------------------------TRIGGER------------------------------------------------------------------------------------------
DROP TRIGGER IF EXISTS p_edil;
DELIMITER $$
CREATE TRIGGER p_edil
BEFORE INSERT ON progettoedilizio
FOR EACH ROW
BEGIN

IF EXISTS (SELECT *
		   FROM SmartBuilding
           WHERE IDedificio = NEW.IDedificio) 
	AND NOT EXISTS (SELECT *
			   FROM SmartBuilding
			   WHERE IDedificio = NEW.IDedificio 
					 AND Completato = 1) THEN
					 IF (NEW.modifica=1) THEN
        SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La struttura che si vuole modificare non è ancora stata completata';
        END IF;
        END IF;
IF NEW.numstadi<5 THEN
	SET NEW.numstadi=5;
END IF;

IF NEW.DataApprov > NEW.DataInizio THEN
	SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT='dati non coerenti';
END IF;

IF NEW.DataPres > NEW.DataApprov THEN
	SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT='dati non coerenti';
END IF;

IF NEW.StimaDataFine < NEW.DataInizio THEN
	SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT='dati non coerenti';
END IF;

IF NEW.DataFine < NEW.DataInizio THEN
	SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT='dati non coerenti';
END IF;

END $$
DELIMITER ;


DROP TRIGGER IF EXISTS costo_pedil;
DELIMITER $$
CREATE TRIGGER costo_pedil
AFTER INSERT ON stadioavanzamento
FOR EACH ROW
BEGIN
        
	call COSTOTOT_(NEW.codprogetto);
 
END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS COSTOTOT_;
DELIMITER $$
CREATE PROCEDURE COSTOTOT_(in codprog varchar(45))
begin
	declare _costo_ integer default 0;
    DECLARE perc INTEGER DEFAULT 0;
	SET _costo_ = (
		SELECT SUM(costo)
		FROM stadioavanzamento
		WHERE CodProgetto=codProg);
	
    UPDATE progettoedilizio
		set costotot=_costo_
        where codprogetto=codprog;
        
	SET perc=
		(
        with
			cont as(
				select codprogetto , count(*)as c
				from stadioavanzamento
				group by codprogetto
					)
			select c*100/numstadi
            from progettoedilizio natural join cont
            where codprogetto=codprog
        );
	UPDATE progettoedilizio
	SET percentLAVORI = perc
	WHERE codprogetto=codprog;

end $$
delimiter ;


DROP TRIGGER IF EXISTS esperienza_responsabili;
DELIMITER $$
CREATE TRIGGER esperienza_responsabili
BEFORE INSERT ON Responsabile
FOR EACH ROW
BEGIN	
			DECLARE esp INTEGER DEFAULT 0;
            DECLARE numcap INTEGER DEFAULT 0;
            
			SET esp = YEAR(CURRENT_DATE)- (
				SELECT YEAR(L.DataAssunzione)
				FROM Lavoratore L
				WHERE L.CodFiscale = NEW.Responsabile);
            
            SET NEW.Esperienza = esp;
            
            SET numcap = (esp/2);
            
            SET NEW.NumCapocantMax= numcap;
        
END $$
DELIMITER ;


DROP TRIGGER IF EXISTS esperienza_capicantiere;
DELIMITER $$
CREATE TRIGGER esperienza_capicantiere
BEFORE INSERT ON Capocantiere
FOR EACH ROW
BEGIN	
		    DECLARE esp INTEGER DEFAULT 0;
            DECLARE numdip INTEGER DEFAULT 0;
            
			SET esp = YEAR(CURRENT_DATE)- (
				SELECT YEAR(L.DataAssunzione)
				FROM Lavoratore L
				WHERE L.CodFiscale = NEW.Capocantiere);
            
           
            SET NEW.Esperienza = esp;
            
            SET numdip = (esp/2);
            
            SET NEW.NumDipMax = numdip;
END $$
DELIMITER ;


DROP TRIGGER IF EXISTS misura_porte;
DELIMITER $$
CREATE TRIGGER misura_porte
BEFORE INSERT ON Accesso
FOR EACH ROW
BEGIN
		DECLARE length1 INTEGER DEFAULT 0;
		DECLARE length2 INTEGER DEFAULT 0;
		DECLARE width1 INTEGER DEFAULT 0;
		DECLARE width2 INTEGER DEFAULT 0;
        DECLARE altmin1 INTEGER DEFAULT 0;
        DECLARE altmin2 INTEGER DEFAULT 0;
        DECLARE altmas1 INTEGER DEFAULT 0;
        DECLARE altmas2 INTEGER DEFAULT 0;
        DECLARE dimMin1 INTEGER DEFAULT 0;
        DECLARE dimMin2 INTEGER DEFAULT 0;	
        
        SET length1 = (
			SELECT min(V.lunghezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano);
            
         SET length2 = (
			SELECT min(V.lunghezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano1);   
            
		 SET width1 = (
			SELECT min(V.larghezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano);
            
		 SET width2 = (
			SELECT min(V.larghezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano1);
            
		 SET altmin1 = (
			SELECT min(V.MinimaAltezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano);
            
		 SET altmin2 = (
			SELECT min(V.MinimaAltezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano1);
            
		 SET altmas1 = (
			SELECT min(V.MassimaAltezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano);
            
		 SET altmas2 = (
			SELECT min(V.MassimaAltezza)
            FROM Vano V
            WHERE V.idVano = NEW.idVano1);
            
		IF length1 > width1 THEN 
			SET dimMin1 = length1;
		ELSEIF length1 < width1 THEN 
			SET dimMin1 = width1;
        END IF;
        
        IF length2 > width2 THEN 
			SET dimMin2 = length2;
		ELSEIF length2 < width2 THEN 
			SET dimMin2 = width2;
		END IF;
	 
	  IF altmin1 <> altmin2 AND altmas1 <> altmas2 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Le due stanze non hanno altezze in comune';
	  END IF;
      
      IF NEW.lunghezza > 3 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La porta è troppo alta per la parete';
	  END IF;
	
	  IF NEW.larghezza-10 > dimMin1 OR NEW.larghezza-10 > dimMin2
      THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La porta è troppo larga per la parete';
	  END IF;
      
	  IF  NEW.idpiano <> NEW.idpiano1 THEN 
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT='accesso impossibile';
	  END IF;

	  IF  NEW.idedificio <> NEW.idedificio1 THEN 
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT='accesso impossibile';
	  END IF;
		
END $$
DELIMITER ;



DROP TRIGGER IF EXISTS misura_finestre;
DELIMITER $$
CREATE TRIGGER misura_finestre
BEFORE INSERT ON Finestra
FOR EACH ROW
BEGIN
		DECLARE length1 INTEGER DEFAULT 0;
		DECLARE width1 INTEGER DEFAULT 0;
        DECLARE dimMin1 INTEGER DEFAULT 0;
		DECLARE flag INTEGER DEFAULT 0;
        
        set new.larghezza = new.larghezza;
        
        SET length1 = (
			SELECT V.lunghezza
            FROM Vano V
            WHERE V.idVano = NEW.idVano and v.idpiano=new.idpiano and v.idedificio=new.idedificio); 
            
		 SET width1 = (
			SELECT V.larghezza
            FROM Vano V
            WHERE V.idVano = NEW.idVano and v.idpiano=new.idpiano and v.idedificio=new.idedificio);
            
		IF length1 > width1 THEN 
			SET dimMin1 = length1;
		ELSEIF length1 < width1 THEN 
			SET dimMin1 = width1;
        END IF;
        
      IF NEW.lunghezza > 3 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La finestra è troppo alta per la parete';
	  END IF;
	
	  IF NEW.larghezza > dimMin1+10
      THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La finestra è troppo larga per la parete';
	  END IF;
		/*
	SET flag=(
		SELECT 1
		FROM accesso
		WHERE idvano = NEW.idvano 
			AND orientamento = NEW.orientamento
			AND NEW.idvano IN (SELECT idvano
							   FROM funzione
							   WHERE esterno=1));
	IF flag=1 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT='finestra impossibele';
	END IF;*/

END $$
DELIMITER ;


DROP TRIGGER IF EXISTS lavoratoretrigger;
DELIMITER $$
CREATE TRIGGER lavoratoretrigger
BEFORE INSERT ON lavoratore
FOR EACH ROW
BEGIN

IF NEW.datanascita > NEW.dataassunzione THEN
	SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT='dati non coerenti';
END IF;

END $$
DELIMITER ;


DROP TRIGGER IF EXISTS rischioAtttrigger;
DELIMITER $$
CREATE TRIGGER rischioAtttrigger
before INSERT ON rischioAttuale
FOR EACH ROW
BEGIN 

	call calcolo(new.idarea, new.idcalamita, @risk)  ;  
	SET new.coeffrischio = @risk;
    
    
END$$
DELIMITER ;
drop procedure if exists calcolo;
delimiter $$
create procedure calcolo(in ar varchar(45), in cal varchar(45), out riskio float)
begin

SET riskio =(
		SELECT AVG(livello - (distanza/100)) 
		FROM colpo natural join smartbuilding
		WHERE idarea=ar
			  AND idcalamita=cal);

end$$
delimiter ;


DROP TRIGGER IF EXISTS rischiotrig;
DELIMITER $$
CREATE TRIGGER rischiotrig
before INSERT ON rischio
FOR EACH ROW
BEGIN 

	call calcolo2(new.idarea, new.idcalamita,new.dataRilevazione, @risk)  ;  
	SET new.coeffrischio = @risk;
END$$
DELIMITER ;
drop procedure if exists calcolo2;
delimiter $$
create procedure calcolo2(in ar varchar(45), in cal varchar(45),in dataRilevazione date,  out riskio float)
begin
SET riskio =(
		SELECT AVG(livello - (distanza/100)) 
		FROM colpo c natural join smartbuilding
		WHERE idarea=ar
			  AND idcalamita=cal
              AND dataRilevazione< c.TimeStamp
              );
if (riskio is null) then set riskio=0; end if;

end$$
delimiter ;


DROP TRIGGER IF EXISTS ordinetrigger;
DELIMITER $$
CREATE TRIGGER ordinetrigger
before INSERT ON ordine
FOR EACH ROW
BEGIN

DECLARE costo_ INTEGER DEFAULT 0;

SET costo_ = (
	SELECT costoaldettaglio*NEW.Quantita
	FROM materiale
	WHERE nome = NEW.nomemateriale AND nomefornitore = NEW.nomefornitore);

SET new.costotot = costo_;
    
END $$
DELIMITER ;


DROP TRIGGER IF EXISTS smarttrigger;
DELIMITER $$
CREATE TRIGGER smarttrigger
BEFORE INSERT ON smartbuilding
FOR EACH ROW
BEGIN
IF EXISTS (
	SELECT 1
	FROM progettoedilizio
	WHERE idedificio=NEW.idedificio AND percentlavori=100) AND new.completato = 0 
THEN
	SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT ='allarme non inseribile';
END IF;

END $$
DELIMITER ;

-- -----------------------------------------------------------------------------------------------------------------------------------------------

DROP procedure IF EXISTS aggiornostadioavanzamento;
DELIMITER $$
CREATE procedure aggiornostadioavanzamento()
BEGIN
	declare stadioa varchar(45);
	declare finito integer default 0;
	declare punt cursor for 
    select distinct idstadio
    from stadioavanzamento
    ;
    declare continue handler for not found set finito =1;
    
    open punt;
		scan: loop
        if finito=1 then
        leave scan;
        end if;
			fetch punt into stadioa;
			call lavorotriggersupporto(stadioa,@costox);
			UPDATE stadioavanzamento
				SET costo = ifnull(@costox,0)
				WHERE idstadio = stadioa;
        end loop scan;
    close punt;

END $$
DELIMITER ;

drop procedure if exists lavorotriggersupporto;
delimiter $$
create procedure lavorotriggersupporto(in stadio varchar(45), OUT costoa int)
begin
    declare orecosto integer default 0;
    declare materialecosto integer default 0;
    
	SET orecosto=(
	SELECT SUM((orafine-orainizio)*stipendioadora)
	FROM turno NATURAL JOIN lavoratore NATURAL JOIN lavoro
	WHERE idstadio=stadio);
    
	SET materialecosto=(
		SELECT SUM(costotot)
		FROM ordine NATURAL JOIN lavoro
		WHERE idstadio = stadio);
    
	SET costoa = orecosto + materialecosto;
end $$
delimiter ;


DROP procedure IF EXISTS costo_p_edilizio;
DELIMITER $$
CREATE procedure costo_p_edilizio()
BEGIN

declare stadioa varchar(45);
	declare finito integer default 0;
	declare punta cursor for 
    select distinct idstadio
    from stadioavanzamento
    ;
    declare continue handler for not found set finito =1;
    
    open punta;
		scan: loop
        if finito=1 then
        leave scan;
        end if;
			fetch punta into stadioa;
			call calcolacosto(stadioa, @costox );
			UPDATE stadioavanzamento
				SET costo = ifnull(@costox,0)
				WHERE idstadio = stadioa;
        end loop scan;
    close punta;

END $$
DELIMITER ;

drop procedure if exists calcolacosto;
delimiter $$
create procedure calcolacosto(in codicestadio varchar(45), out costox integer )
begin


DECLARE orecosto INTEGER DEFAULT 0;
DECLARE materialecosto INTEGER DEFAULT 0;

SET orecosto=(
	SELECT SUM((orafine-orainizio)*StipendioAdOra)
	FROM turno NATURAL JOIN lavoratore NATURAL JOIN lavoro
	WHERE idstadio=codicestadio);
    
SET materialecosto=(
	SELECT SUM(costotot)
	FROM ordine NATURAL JOIN lavoro
	WHERE idstadio = codicestadio);
    
SET costox = orecosto + materialecosto;


end $$
delimiter ;

DROP procedure IF EXISTS costo_p_edilizio2;
DELIMITER $$
CREATE procedure costo_p_edilizio2()
BEGIN

	declare progettoa varchar(45);
	declare finito integer default 0;
	declare punta cursor for 
    select distinct codprogetto
    from stadioavanzamento
    ;
    declare continue handler for not found set finito =1;
    
    open punta;
		scan: loop
        if finito=1 then
        leave scan;
        end if;
			fetch punta into progettoa;
            SET @costo_ = (
					SELECT SUM(costo)
					FROM stadioavanzamento
					WHERE CodProgetto=progettoa
					);

			UPDATE progettoedilizio
				SET costotot = @costo_
				WHERE CodProgetto= progettoa;
        end loop scan;
    close punta;

END $$
DELIMITER ;

drop procedure if exists aggiornamentoarea;
delimiter $$
create procedure aggiornamentoarea()
begin

declare finito integer default 0;
declare x varchar(45) default ' ';
declare puntatore CURSOR for
	select idarea
	from areageografica;
declare  continue handler for not found set finito = 1;
open puntatore;
scan:loop
		fetch puntatore into x;
		if (finito =1) then
        leave scan;
        end if;
        call aggio(x,@y);
        update areageografica set rischiotot= @y where idarea=x;
        end loop;
close puntatore;

end$$
delimiter ;

drop procedure if exists aggio ;
delimiter $$
create procedure aggio(in area integer, out coeff float)
begin

    set coeff =(
	select avg(r2.coeffrischio) 
    from rischioattuale r2 
    where r2.idarea=area
    );

end$$
delimiter ;
